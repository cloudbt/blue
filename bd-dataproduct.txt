#!/bin/bash

# 定数設定
S3_BUCKET="my-terraform-state-bucket"  # S3バケット名
S3_KEY_PREFIX="asp/dev/"               # .tfstateファイルが格納されているS3のパス
CSV_FILE="s3list.csv"                  # ローカルのCSVファイル名
GITHUB_REPO_DIR="/path/to/repository/A" # GitHubリポジトリAのローカルパス
GITHUB_CSV_PATH="${GITHUB_REPO_DIR}/docs/${CSV_FILE}"  # GitHubリポジトリの保存パス

# .tfstateファイルを一時ディレクトリにダウンロード
mkdir -p /tmp/tfstate_files
aws s3 cp --recursive "s3://${S3_BUCKET}/${S3_KEY_PREFIX}" /tmp/tfstate_files --exclude "*" --include "*.tfstate"

# CSVファイルのヘッダーを作成
echo "TFStateFile,Bucket,Policy" > /tmp/${CSV_FILE}

# ダウンロードした全ての.tfstateファイルから情報を抽出
for file in /tmp/tfstate_files/*.tfstate; do
  # jqコマンドでaws_s3_bucketかつmodeが"managed"のbucketとpolicyを抽出
  bucket=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.bucket' "$file")
  policy=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.policy' "$file")

  # policyが空であれば"なし"、空でなければ"あり"を設定
  if [[ -z "$policy" ]]; then
    policy_status="なし"
  else
    policy_status="あり"
  fi

  # bucketが空でない場合のみCSVに追記
  if [[ -n "$bucket" ]]; then
    tfstate_file=$(basename "$file")  # .tfstateファイル名を取得
    echo "${tfstate_file},${bucket},${policy_status}" >> /tmp/${CSV_FILE}
  fi
done

# GitHubリポジトリのcsvファイルにコピー
cp /tmp/${CSV_FILE} "${GITHUB_CSV_PATH}"

# GitHubリポジトリにCSVファイルをコミットしてプッシュ
cd "${GITHUB_REPO_DIR}" || exit
git add "${GITHUB_CSV_PATH}"
git commit -m "Update s3list.csv with latest S3 bucket and policy information"
git push origin main  # ブランチ名は適宜変更してください

# 一時ファイルのクリーンアップ
rm -rf /tmp/tfstate_files /tmp/${CSV_FILE}

echo "CSVファイルがGitHubリポジトリに保存されました。"
