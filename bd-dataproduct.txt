#!/bin/bash

# 定数設定
S3_BUCKET="my-terraform-state-bucket"  # S3バケット名
S3_KEY_PREFIX="asp/dev/"               # .tfstateファイルが格納されているS3のパス
CSV_FILE="s3list.csv"                  # ローカルのCSVファイル名
GITHUB_REPO_DIR="/path/to/repository/A" # GitHubリポジトリAのローカルパス
GITHUB_CSV_PATH="${GITHUB_REPO_DIR}/docs/${CSV_FILE}"  # GitHubリポジトリの保存パス

# .tfstateファイルを一時ディレクトリにダウンロード
mkdir -p /tmp/tfstate_files
aws s3 cp --recursive "s3://${S3_BUCKET}/${S3_KEY_PREFIX}" /tmp/tfstate_files --exclude "*" --include "*.tfstate"

# CSVファイルのヘッダーを作成
echo "TFStateFile,Bucket,Policy,Tags,Logging_TargetBucket,ObjectLockEnabled,ObjectLockDays,ObjectLockMode,ObjectLockYears,LifecycleRule" > /tmp/${CSV_FILE}

# ダウンロードした全ての.tfstateファイルから情報を抽出
for file in /tmp/tfstate_files/*.tfstate; do
  tfstate_file=$(basename "$file")  # .tfstateファイル名を取得

  # jqコマンドでaws_s3_bucketかつmodeが"data"でないbucketとその他フィールドを抽出
  buckets=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.bucket' "$file")
  policies=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.policy' "$file")
  tags=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.tags_all' "$file")
  loggings=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.logging.target_bucket' "$file")
  object_lock_configs=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.object_lock_configuration' "$file")
  lifecycle_rules=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.lifecycle_rule' "$file")

  # 抽出したbucketとpolicyを行ごとに処理
  IFS=$'\n' read -rd '' -a bucket_array <<<"$buckets"
  IFS=$'\n' read -rd '' -a policy_array <<<"$policies"
  IFS=$'\n' read -rd '' -a logging_array <<<"$loggings"
  IFS=$'\n' read -rd '' -a object_lock_array <<<"$object_lock_configs"
  IFS=$'\n' read -rd '' -a lifecycle_rule_array <<<"$lifecycle_rules"
  IFS=$'\n' read -rd '' -a tag_array <<<"$tags"

  for i in "${!bucket_array[@]}"; do
    bucket="${bucket_array[$i]}"
    policy="${policy_array[$i]}"
    logging="${logging_array[$i]}"
    object_lock="${object_lock_array[$i]}"
    lifecycle_rule="${lifecycle_rule_array[$i]}"
    tags="${tag_array[$i]}"

    # policyが空であれば"なし"、空でなければ"あり"を設定
    if [[ -z "$policy" ]]; then
      policy_status="なし"
    else
      policy_status="あり"
    fi

    # loggingが空でない場合はtarget_bucketを取得
    if [[ -n "$logging" ]]; then
      logging_target="$logging"
    else
      logging_target="なし"
    fi

    # object_lock_configurationが空でない場合は詳細を取得
    if [[ -n "$object_lock" ]]; then
      object_lock_enabled=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.object_lock_configuration.object_lock_enabled' "$file")
      object_lock_days=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.object_lock_configuration.rule.default_retention.days' "$file")
      object_lock_mode=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.object_lock_configuration.rule.default_retention.mode' "$file")
      object_lock_years=$(jq -r '.resources[] | select(.type == "aws_s3_bucket" and .mode != "data") | .instances[].attributes.object_lock_configuration.rule.default_retention.years' "$file")
    else
      object_lock_enabled="なし"
      object_lock_days="なし"
      object_lock_mode="なし"
      object_lock_years="なし"
    fi

    # bucketが空でない場合のみCSVに追記
    if [[ -n "$bucket" ]]; then
      echo "${tfstate_file},${bucket},${policy_status},${tags},${logging_target},${object_lock_enabled},${object_lock_days},${object_lock_mode},${object_lock_years},${lifecycle_rule}" >> /tmp/${CSV_FILE}
    fi
  done
done

# GitHubリポジトリのcsvファイルにコピー
cp /tmp/${CSV_FILE} "${GITHUB_CSV_PATH}"

# GitHubリポジトリにCSVファイルをコミットしてプッシュ
cd "${GITHUB_REPO_DIR}" || exit
git add "${GITHUB_CSV_PATH}"
git commit -m "Update s3list.csv with latest S3 bucket and policy information"
git push origin main  # ブランチ名は適宜変更してください

# 一時ファイルのクリーンアップ
rm -rf /tmp/tfstate_files /tmp/${CSV_FILE}

echo "CSVファイルがGitHubリポジトリに保存されました。"
